//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input System/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControlls"",
            ""id"": ""139e3fea-1b1a-46cd-9d65-37fcc47ccde8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0f30b5b5-c886-4f6e-be87-69b22560826e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""59f01847-d3b9-43aa-aea5-f178f291c3e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fast Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6f85e30b-6a3a-450c-a253-61066105ed5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Strong Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3630a34f-6593-458c-b763-a5355120f60a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""Button"",
                    ""id"": ""43d5f22d-e9eb-40fd-a640-af61ecbf9aa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Warp"",
                    ""type"": ""Button"",
                    ""id"": ""8c179820-8ac1-4dc8-9a26-cb65766d40ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""b741150e-c694-4c63-84a8-aedad051208d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f8d86ce-0644-4583-adcf-654670c6824f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f03c3fa9-8a21-4a2f-874e-6f3a6de60518"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""cc873aa8-2367-445f-86d2-16ad9074fd93"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""d256e01a-5527-4bfb-8873-a87b2de1349c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7978e847-7385-4d66-8b3a-1ab6ac2d1768"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""14d22d5b-b17e-4834-89ec-df66f231be82"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c11b8876-645e-4824-a13c-79f78b0d7a02"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54d7216a-f174-48aa-8c65-bd243676c308"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e00a8cf5-cd94-4a1b-8865-5039a42531b9"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a955f7c-ee08-4a5f-bbad-e1f57675e15b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bed330d-b5e9-49af-92ca-22c828f32d78"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strong Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36b44fe7-9a5f-4036-a91e-c4bdc6f91908"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strong Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""309bbbc8-adc7-45e6-9c5f-36eb5cc8ff2f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0f4e477-8885-4d63-a568-5f9e16210c73"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""890717f0-844e-4933-b0a1-d67d384bc083"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Warp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f094292f-c813-497f-962b-3cc860b814c3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Warp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b61946bf-fda9-45dd-8b6a-6548a2176a40"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35e705f0-0f4e-4140-99c0-fa11974c6714"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControlls"",
            ""id"": ""d197c388-33d1-4a3e-a632-fc5a5ba9256d"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ffa1790d-2054-40ed-8e36-5674f82a898d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8de23df-e40a-4113-a7e4-c40445d062f6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aea0dcdf-5bf3-4d5b-a89f-36ac86357d34"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.1,y=0.1)"",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControlls
        m_CharacterControlls = asset.FindActionMap("CharacterControlls", throwIfNotFound: true);
        m_CharacterControlls_Movement = m_CharacterControlls.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControlls_Jumping = m_CharacterControlls.FindAction("Jumping", throwIfNotFound: true);
        m_CharacterControlls_FastAttack = m_CharacterControlls.FindAction("Fast Attack", throwIfNotFound: true);
        m_CharacterControlls_StrongAttack = m_CharacterControlls.FindAction("Strong Attack", throwIfNotFound: true);
        m_CharacterControlls_Sprinting = m_CharacterControlls.FindAction("Sprinting", throwIfNotFound: true);
        m_CharacterControlls_Warp = m_CharacterControlls.FindAction("Warp", throwIfNotFound: true);
        m_CharacterControlls_Camera = m_CharacterControlls.FindAction("Camera", throwIfNotFound: true);
        // CameraControlls
        m_CameraControlls = asset.FindActionMap("CameraControlls", throwIfNotFound: true);
        m_CameraControlls_Rotation = m_CameraControlls.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControlls
    private readonly InputActionMap m_CharacterControlls;
    private List<ICharacterControllsActions> m_CharacterControllsActionsCallbackInterfaces = new List<ICharacterControllsActions>();
    private readonly InputAction m_CharacterControlls_Movement;
    private readonly InputAction m_CharacterControlls_Jumping;
    private readonly InputAction m_CharacterControlls_FastAttack;
    private readonly InputAction m_CharacterControlls_StrongAttack;
    private readonly InputAction m_CharacterControlls_Sprinting;
    private readonly InputAction m_CharacterControlls_Warp;
    private readonly InputAction m_CharacterControlls_Camera;
    public struct CharacterControllsActions
    {
        private @CustomInput m_Wrapper;
        public CharacterControllsActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControlls_Movement;
        public InputAction @Jumping => m_Wrapper.m_CharacterControlls_Jumping;
        public InputAction @FastAttack => m_Wrapper.m_CharacterControlls_FastAttack;
        public InputAction @StrongAttack => m_Wrapper.m_CharacterControlls_StrongAttack;
        public InputAction @Sprinting => m_Wrapper.m_CharacterControlls_Sprinting;
        public InputAction @Warp => m_Wrapper.m_CharacterControlls_Warp;
        public InputAction @Camera => m_Wrapper.m_CharacterControlls_Camera;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControllsActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControllsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jumping.started += instance.OnJumping;
            @Jumping.performed += instance.OnJumping;
            @Jumping.canceled += instance.OnJumping;
            @FastAttack.started += instance.OnFastAttack;
            @FastAttack.performed += instance.OnFastAttack;
            @FastAttack.canceled += instance.OnFastAttack;
            @StrongAttack.started += instance.OnStrongAttack;
            @StrongAttack.performed += instance.OnStrongAttack;
            @StrongAttack.canceled += instance.OnStrongAttack;
            @Sprinting.started += instance.OnSprinting;
            @Sprinting.performed += instance.OnSprinting;
            @Sprinting.canceled += instance.OnSprinting;
            @Warp.started += instance.OnWarp;
            @Warp.performed += instance.OnWarp;
            @Warp.canceled += instance.OnWarp;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(ICharacterControllsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jumping.started -= instance.OnJumping;
            @Jumping.performed -= instance.OnJumping;
            @Jumping.canceled -= instance.OnJumping;
            @FastAttack.started -= instance.OnFastAttack;
            @FastAttack.performed -= instance.OnFastAttack;
            @FastAttack.canceled -= instance.OnFastAttack;
            @StrongAttack.started -= instance.OnStrongAttack;
            @StrongAttack.performed -= instance.OnStrongAttack;
            @StrongAttack.canceled -= instance.OnStrongAttack;
            @Sprinting.started -= instance.OnSprinting;
            @Sprinting.performed -= instance.OnSprinting;
            @Sprinting.canceled -= instance.OnSprinting;
            @Warp.started -= instance.OnWarp;
            @Warp.performed -= instance.OnWarp;
            @Warp.canceled -= instance.OnWarp;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(ICharacterControllsActions instance)
        {
            if (m_Wrapper.m_CharacterControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControllsActions @CharacterControlls => new CharacterControllsActions(this);

    // CameraControlls
    private readonly InputActionMap m_CameraControlls;
    private List<ICameraControllsActions> m_CameraControllsActionsCallbackInterfaces = new List<ICameraControllsActions>();
    private readonly InputAction m_CameraControlls_Rotation;
    public struct CameraControllsActions
    {
        private @CustomInput m_Wrapper;
        public CameraControllsActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_CameraControlls_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_CameraControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControllsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControllsActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ICameraControllsActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ICameraControllsActions instance)
        {
            if (m_Wrapper.m_CameraControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControllsActions @CameraControlls => new CameraControllsActions(this);
    public interface ICharacterControllsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
        void OnFastAttack(InputAction.CallbackContext context);
        void OnStrongAttack(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
        void OnWarp(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface ICameraControllsActions
    {
        void OnRotation(InputAction.CallbackContext context);
    }
}
